import argparse
from pydgeot.devserver import Server
from pydgeot.handlers import get_handlers

parser = argparse.ArgumentParser()
parser.add_argument('source_root', metavar='SOURCE_PATH')
parser.add_argument('-c', '--config', dest='config_file',  default=Server.DEFAULT_CONFIG_FILE, help='Config file to load')
parser.add_argument('-p', '--port', type=int, help='Port to serve on')
parser.add_argument('-a', '--address', help='Address to serve on')
parser.add_argument('-i', '--index-files', dest='index_files', help='Comma separated index files list')
parser.add_argument('-u', '--url-redirects', dest='url_redirects', help='Comma seperated url rewrite pairs')
args = vars(parser.parse_args())

config = { 'devserver': {} }

if args['address'] is not None:
    config['devserver']['address'] = args['address']
if args['port'] is not None:
    config['devserver']['port'] = args['port']

# Split render_paths and/or index_files in to lists
if args['index_files'] is not None:
    config['devserver']['index_files!'] = args['index_files'].split(',')
if args['url_redirects'] is not None:
    urls = args['url_redirects'].split(',')
    config['devserver']['redirects!'] = dict(zip(urls[::2], urls[1::2]))

server = Server(args['source_root'], args['config_file'], config)

for handler in get_handlers():
    if hasattr(handler, 'desc'):
        print('Available renderer: {0}'.format(handler.desc))
    else:
        print('Available renderer: {0}'.format(handler.uris.pattern))

try:
    print('Serving on %s:%s' % (server.address, server.port))
    server.start()
except KeyboardInterrupt:
    server.stop()
